<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Study | Life Stream]]></title>
  <link href="http://zjuntor.info/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://zjuntor.info/"/>
  <updated>2014-09-25T10:34:17+08:00</updated>
  <id>http://zjuntor.info/</id>
  <author>
    <name><![CDATA[zjuntor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Something About Learning JavaScript]]></title>
    <link href="http://zjuntor.info/2012/08/something-about-learning-javascript/"/>
    <updated>2012-08-11T00:00:00+08:00</updated>
    <id>http://zjuntor.info/2012/08/something-about-learning-javascript</id>
    <content type="html"><![CDATA[<p>Recently, I learned JavaScript forward, using this <a href="http://book.douban.com/subject/3182419/" target="_blank">book</a>, along with the <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Guide" target="_blank">JavaScript Guide</a> from Mozilla Developer Network. Here are some note about the key point to me.</p>

<p><code>this</code> keyword</p>

<p>There is a statement in the <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Expressions_and_Operators#this" target="_blank">Guide</a>:</p>

<blockquote>
  <p>Use the <code>this</code> keyword to refer to the current object. In general, <code>this</code> refers to the calling object in a method.</p>
</blockquote>

<p>The key point is the second sentence, which clearly and exactly explains that <code>this</code> keyword refers the calling object. This is enough, and the first sentence, let it go the hell.</p>

<p>Closure</p>

<p>After a function has returned, the local environment (local variables etc.) can not be collected immediately by GC, when there are some external reference to the local environment. This can be made by assigning a nested function which uses the local variables to an external variable in the function, or returning the nested function and assigning it to external variables. for example:</p>

<pre class="brush:js">//closure#1
var getter,setter;
(function(){
    var value=0;
    getter = function(){return value;};
    setter = function(v){value = v;};
})();
//closure#2
function iterator(x){
    var i = 0;
    return function(){return x[i++];};
}</pre>

<p>Constructor</p>

<p>A constructor is an function object just looks like normal function objects which is use to create new objects. The constructor property of an object is the constructor using which the object made(it’s a convenience and by default). When a constructor is called using <code>new</code> operator, there something happened behind the scene:</p>

<ul>
  <li>JavaScript engine creates a generic object and assignes it to <code>this</code> , and then passes it to the constructor.</li>
  <li>assigning contructor.prototype to the internal property of object <code>this</code> refers, in Firefox the property is ‘__proto__’, which is used for making up the prototype chain. Then assign the constructor.prototype.constructor object to constructor property of object <code>this</code> refers.</li>
  <li>finally, make up the rest of the object with the code in the constructor and then return the object <code>this</code> refers to implicitly.</li>
</ul>

<p>Prototype</p>

<p>JavaScript is object-based, object-oriented language. it use prototype to implement the inheritance. For example:</p>

<pre class="brush:applescript">var Shape = function(){ this.info = 'Shape'; }
var Circle = function(diameter){ this.diameter = diameter; }
Circle.prototype = new Shape();
Circle.prototype.constructor = Circle;</pre>

<p>When try to access a property of an object, the JavaScript engine searches the object first, if not found, then up along the prototype chain to the end until the property has been found, if still not found, return undefined.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adjust and Then Go Ahead]]></title>
    <link href="http://zjuntor.info/2011/10/adjust-and-then-go-ahead/"/>
    <updated>2011-10-29T00:00:00+08:00</updated>
    <id>http://zjuntor.info/2011/10/adjust-and-then-go-ahead</id>
    <content type="html"><![CDATA[<p>从上周末开始开始看<a href="http://book.douban.com/subject/1787434/" target="_blank">&lt;Pro JSP 2&gt; </a>这本书。在学校的时候为了完成课程作业，曾功利地看过那本红皮的JSP 的书，不过说来惭愧，现在脑子里就剩下那几个名词了，写个Hello world 还得靠IDE。</p>

<p>本来打算看完这本书然后一路下去，详细了解一下整个JavaEE 技术栈。无奈基础实在是太差，光是要想把JSP 和 servlet 相关的大大小小的细节理顺了就需要同时看一堆东西，就拿XML 来说，光知道XML 结构是远不够的。然而我的现状是，同时最多展开两个主题就已经不错了，所以琢磨了一下，这本书看完了后，暂时停下来，在未来相当长的一段时间里，把一些Java 的基础的知识仔细琢磨一下，当然重要的是实践，争取闲暇的时候能写点有意思的东西，娱乐一下。</p>

<p>另外，感慨一下，以前用IDE 不觉得，这次用VIM 写Servlet，JSP 页面和相关配置xml，没少遇坎坷，当然IDE 固然好，但是有些事一开始就交给IDE 了，那永远就没有了解它的机会了。</p>

<p>原来拟了一个长的有些二逼的标题，琢磨了一下，我从来没有嫌过代码太短，也不曾写过什么能叫人会心一笑的缩进，总结一下，我就是个普通青年，那么长的标题不合适。</p>
]]></content>
  </entry>
  
</feed>
